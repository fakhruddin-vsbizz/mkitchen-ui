import React, { useEffect } from "react";
import {
	Row,
	Col,
	Select,
	List,
	Divider,
	Card,
	Button,
	AutoComplete,
	Input,
	Switch,
	DatePicker,
	Tag,
	Modal,
	ConfigProvider,
} from "antd";
import { CaretRightOutlined, PlusOutlined } from "@ant-design/icons";

import { useState } from "react";
import axios from "axios";
import Header from "../components/navigation/Header";
import Sidebar from "../components/navigation/SideNav";
import DeshboardBg from "../res/img/DeshboardBg.png";
const Cooking = () => {
	const data = ["Set Menu", "Cooking", "Dispatch"];
	const [selectedDate, setSelectedDate] = useState(null);
	const [menuFoodId, setMenuFoodId] = useState();
	const [inventoryId, setInventoryId] = useState();
	const [reorderQuantity, setReorderQuantity] = useState();

	const [leftOverQuantity, setLeftOverQuantity] = useState();

	const [isDisabled, setIsDisabled] = useState(false);

	const [reorderLogs, setReorderLogs] = useState([]);
	const [update, setUpdate] = useState(false);
	const [visible, setVisible] = useState(false);
	const [totalAshkashCount, setTotalAshkashCount] = useState();

	const [getFoodList, setGetFoodList] = useState();

	const handleDateChange = date => {
		console.log(date);
		const dateObj = new Date(date);
		const formattedDate = `${
			dateObj.getMonth() + 1
		}/${dateObj.getDate()}/${dateObj.getFullYear()}`;
		setSelectedDate(formattedDate);
	};

	console.log(selectedDate);

	useEffect(() => {
		const getData = async () => {
			if (menuFoodId) {
				const data = await fetch("http://localhost:5001/admin/menu", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						add_type: "get_total_ashkash_sum",
						menu_id: menuFoodId,
					}),
				});

				if (data) {
					console.log(data);
					const res = await data.json();
					if (res) {
						setTotalAshkashCount(res);
						console.log(res);
					}
				}
			}
		};
		getData();
	}, [menuFoodId]);

	useEffect(() => {
		const getFood = async () => {
			if (selectedDate) {
				const data = await fetch("http://localhost:5001/cooking/ingredients", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						type: "get_food_Item",
						date: selectedDate,
					}),
				});
				if (data) {
					const res = await data.json();
					console.log(res);
					if (res) {
						setMenuFoodId(res[0]._id);
						setGetFoodList(res[0].food_list);
					}
				}
			}
		};
		getFood();
		if (new Date(selectedDate) < new Date().setDate(new Date().getDate() - 1)) {
			setIsDisabled(true);
		} else {
			setIsDisabled(false);
		}
	}, [selectedDate]);

	const [ingredientLists, setIngredientLists] = useState([]);

	// Call the API endpoint and retrieve the ingredient lists
	useEffect(() => {
		if (getFoodList) {
			axios
				.post("http://localhost:5001/cooking/ingredients", {
					food_item_ids: getFoodList,
					type: "get_food_and_ingridient",
				})
				.then(response => {
					setIngredientLists(response.data);
				})
				.catch(error => {
					console.error(error);
				});
		}
	}, [getFoodList]);

	console.log("Ingridient list: ", ingredientLists);
	console.log("Food Items: ", getFoodList);
	console.log("Food Menu id: ", menuFoodId);
	console.log("reorder logs: ", reorderLogs);

	const handleIngridientReOrder = async (inventoryId, quantity) => {
		setInventoryId(inventoryId);
		setReorderQuantity(quantity);
	};

	const handleleftOver = async (inventoryId, quantity) => {
		setInventoryId(inventoryId);
		setLeftOverQuantity(quantity);
	};

	useEffect(() => {
		const getData = async () => {
			if (selectedDate && menuFoodId) {
				const data = await fetch("http://localhost:5001/operation_pipeline", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						type: "get_reorder_data",
						date: selectedDate,
						menu_id: menuFoodId,
					}),
				});

				if (data) {
					const res = await data.json();
					if (res) {
						if (selectedDate !== "1/1/1970") {
							setReorderLogs(res.reorder_logs);
						} else {
							setReorderLogs([]);
						}
					}
				}
			}
		};
		getData();
	}, [selectedDate, menuFoodId]);

	useEffect(() => {
		const updateReorderLog = async () => {
			if (reorderLogs && update)
				try {
					const data = await fetch(
						"http://localhost:5001/cooking/ingredients",
						{
							method: "PUT",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								type: "update_operation_pipeline_reorder_logs",
								menu_id: menuFoodId,
								reorder_logs: reorderLogs,
							}),
						}
					);

					if (data) {
						const res = await data.json();
						console.log(data);
						setUpdate(false);
						setReorderQuantity("");
					}
				} catch (error) {
					console.log(error);
				}
		};
		updateReorderLog();
	}, [update, reorderLogs]);

	const reorderIngridient = async ing => {
		console.log(ing);
		let obj = {
			ingridient_name: ing,
			inventory_id: inventoryId,
			quantity_requireds: +reorderQuantity,
			reorder_delivery_status: true,
		};

		setReorderLogs([...reorderLogs, obj]);
		setUpdate(true);
	};

	const cookingDone = async () => {
		try {
			const data = await fetch("http://localhost:5001/operation_pipeline", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					type: "update_operation_pipeline_status",
					menu_id: menuFoodId,
					status: 3,
				}),
			});

			if (data) {
				const res = await data.json();
				console.log(data);
				setVisible(true);
			}
		} catch (error) {
			console.log(error);
		}
	};

	const returnIngToInventory = async inventory_id => {
		console.log("inv: ", inventoryId);
		console.log("leftOverQuantity: ", leftOverQuantity);

		try {
			const data = await fetch("http://localhost:5001/inventory/addinventory", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					type: "udate_volume",
					inventory_id: inventory_id,
					quantity: leftOverQuantity,
				}),
			});

			if (data) {
				const res = await data.json();
				console.log(data);
			}
		} catch (error) {
			console.log(error);
		}
	};
	return (
		<div
			style={{ margin: 0, padding: 0}}>
			<Modal
				open={visible}
				onOk={() => setVisible(false)}
				onCancel={() => setVisible(false)}
				footer={[
					<Button key="ok" type="primary" onClick={() => setVisible(false)}>
						OK
					</Button>,
				]}>
				<div style={{ textAlign: "center" }}>
					<h2 style={{ color: "#52c41a" }}>Success!</h2>
					<p>Ingridient Added Successfully</p>
				</div>
			</Modal>
			<ConfigProvider
				theme={{
					token: {
						colorPrimary: "orange",
					},
				}}>
				<div style={{ display: "flex" }}>
					<Sidebar k="2" userType="cooking" />

					<div style={{ width: "100%" }}>
						<Header
							title="Cooking Operation"
							comp=<Row>
								<Col xs={24} xl={12}>
									Select the date:
									<br />
									<DatePicker onChange={handleDateChange} />
								</Col>
								{/* <Col xs={24} xl={12}>
                  Select the client:
                  <br />
                  <Select
                    defaultValue={0}
                    style={{ width: "70%" }}
                    options={[
                      { value: 0, label: "MK" },
                      { value: 1, label: "Mohsin Ranapur" },
                      { value: 2, label: "Shk. Aliasgar Ranapur" },
                    ]}
                  />
                </Col> */}
							</Row>
						/>

						<Row style={{ padding: 10 }}>
							<Col xs={24} xl={16} style={{ padding: "2%" }}>
								<List
									style={{ width: "100%", overflowY: "scroll", height: "70vh" }}
									itemLayout="horizontal"
									dataSource={getFoodList}
									renderItem={(item, index) => (
										<List.Item>
											<Card style={{ width: "100%" }}>
												<Row>
													<Col xs={12} xl={6}>
														<label
															style={{ fontSize: "130%", color: "#e08003" }}>
															<b>{item.food_name}</b>
														</label>
													</Col>
													<Col xs={12} xl={6}>
														<i
															style={{ color: "#e08003" }}
															class="fa-solid fa-circle-check"></i>{" "}
														<label
															style={{ fontSize: "100%", color: "#e08003" }}>
															Ingredients Set
														</label>
													</Col>
													<Col xs={12} xl={6}>
														<center>
															Cooked? &nbsp;&nbsp;&nbsp;
															<Switch disabled={isDisabled} />
														</center>
													</Col>
												</Row>
												<hr></hr>
												<Row>
													<Col xs={24} xl={24} style={{ padding: "1%" }}>
														Here are the required ingredients for the cooking:
														<br />
														<List
															dataSource={ingredientLists[index]}
															renderItem={(ing, index) => (
																<List.Item>
																	<Card
																		style={{
																			width: "100%",
																			backgroundColor: "transparent",
																			border: "none",
																		}}>
																		<Row
																			style={{
																				padding: 20,
																				display: "flex",
																				backgroundColor: "#fff6ed",
																				borderRadius: 10,
																				borderBottom: "2px solid orange",
																				width: "100%",
																			}}>
																			<Col
																				xs={12}
																				xl={6}
																				style={{ padding: "2%" }}>
																				<label
																					style={{
																						fontSize: "110%",
																						color: "#e08003",
																					}}>
																					<h3>{ing.ingredient_name}</h3>
																				</label>
																			</Col>
																			<Col
																				xs={12}
																				xl={6}
																				style={{ padding: "2%" }}>
																				Amount procured:
																				<br />
																				{totalAshkashCount && (
																					<label
																						style={{
																							fontSize: "120%",
																							color: "#e08003",
																						}}>
																						{ing.perAshkash * totalAshkashCount}
																					</label>
																				)}
																			</Col>
																			<Col
																				xs={12}
																				xl={6}
																				style={{ padding: "2%" }}>
																				You can re-order the items here too if
																				needed:
																				<br />
																				<br />
																				<Input
																					style={{ width: "100%" }}
																					onChange={e =>
																						handleIngridientReOrder(
																							ing.inventory_item_id,
																							e.target.value
																						)
																					}
																					placeholder="Eg: 1L, 12KG, etc"></Input>
																				<Button
																					disabled={isDisabled}
																					onClick={e =>
																						reorderIngridient(
																							ing.ingredient_name
																						)
																					}
																					size="small"
																					type="primary">
																					Re-order Item
																				</Button>
																			</Col>
																			<Col
																				xs={12}
																				xl={6}
																				style={{
																					textAlign: "right",
																					padding: "2%",
																				}}>
																				Leftover amount of {ing.ingredient_name}
																				<br />
																				<br />
																				<Input
																					onChange={e =>
																						handleleftOver(
																							ing.inventory_item_id,
																							e.target.value
																						)
																					}
																					style={{ width: "100%" }}
																					placeholder="Eg: 1L, 12KG, etc"></Input>
																				<Button
																					disabled={isDisabled}
																					onClick={e =>
																						returnIngToInventory(
																							ing.inventory_item_id
																						)
																					}
																					size="small"
																					type="primary">
																					Return to inventory
																				</Button>
																			</Col>
																		</Row>
																	</Card>
																</List.Item>
															)}
														/>
													</Col>
												</Row>
											</Card>
										</List.Item>
									)}
								/>
							</Col>
							<Col xs={12} xl={8} style={{ padding: "2%" }}>
								{reorderLogs && (
									<div>
										<label style={{ fontSize: "150%" }}>Reorder Log:</label>
										<br />
										<br />
										<List
											style={{
												height: "65vh",
												overflowY: "scroll",
												padding: 0,
											}}
											dataSource={reorderLogs}
											renderItem={item => (
												<List.Item>
													<Card
														style={{
															width: "100%",
															backgroundColor: "transparent",
															border: "none",
														}}>
														<Row
															style={{
																padding: 20,
																display: "flex",
																backgroundColor: "#fff",
																borderRadius: 10,
																borderBottom: "2px solid orange",
																width: "100%",
															}}>
															<Col xs={12} xl={8}>
																<label
																	style={{
																		fontSize: "120%",
																		color: "#e08003",
																	}}>
																	{item.ingridient_name}
																</label>
															</Col>
															<Col xs={12} xl={8}>
																Amount re-ordered:
																<br />
																<b style={{ color: "#e08003" }}>
																	{item.quantity_requireds}
																</b>
															</Col>
															<Col xs={12} xl={8}>
																Delivery Status: <br />
																{item.reorder_delivery_status ? (
																	<Tag color="orange">PENDING</Tag>
																) : (
																	<Tag color="green">DELIVERED</Tag>
																)}
															</Col>
														</Row>
													</Card>
												</List.Item>
											)}
										/>
									</div>
								)}
							</Col>
							{getFoodList && (
								<Button
									block
									disabled={isDisabled}
									style={{ height: "160%", fontSize: "200%" }}
									type="primary"
									onClick={cookingDone}>
									Mark Cooking Done
								</Button>
							)}
						</Row>
					</div>
				</div>
			</ConfigProvider>
		</div>
	);
};

export default Cooking;
